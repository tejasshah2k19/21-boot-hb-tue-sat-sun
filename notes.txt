1) 	add dep 
	1) spring web
	2) spring data jpa
	3) pg driver 
	
2) application.properties 

	server port 
	server.port=9999
	
	db connection properties 
	spring.datasource.url=jdbc:postgresql://localhost:5432/spring
	spring.datasource.username=postgres
	spring.datasource.password=root
	
	hibernate properties 
	spring.jpa.show-sql=true
	spring.jpa.hibernate.ddl-auto=update
	spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect	
	

3) create database in pg 

4) create entity folder and create one entity user 

	check user entity 
	
	
5) add @EnableJpaAuditing  [ @SpringBootApplication ] 
		so we can automatically map createdAt and updatedAt 

6) JPA--> repository -> interface 

7) create controller and restapi 

--------------------------------------------------------------------------------------
2.0
--------------------------------------------------------------------------------------



1) pom.xml
	spring starter data jpa 
	pg driver 

2) configuration - application.properties 
	spring.datasource.*
	
	spring.jpa and spring.hibernate 

3)  class -> UserEntity 
	@Entity
	@Table(name="users")

	@Id
	@GeneratedValue
	Long userId;
	
	@NotBlank(message = "Please Enter firstName")
	String firstName;
	
	@Column(nullable = false,updatable = false)
	String email;
4) repository 
	UserRepository --> interface 
		extends JpaRepository<UserEntity, Long>
	

5) controller 
		@Autowired
		UserRepository userRepo; 

		
For created and updatedAt we can have two ways 1) using hibernate 2) using persistnace api

1) using hiberante 
		@CreationTimestamp
		Date createdAt;

		@UpdateTimestamp
 		Date updatedAt;

2) using persistance 
	@Temporal(TemporalType.TIMESTAMP)
	@CreatedDate
	Date createdAt;

	@Temporal(TemporalType.TIMESTAMP)
	@LastModifiedDate
	Date updatedAt;

	we also need to enable jpa audition for this and the ,  add one listener in entity or we can create bean** in 		@Configuration,
	1) @EnableJpaAuditing ---- in @SpringBootApplication 
	2) adding listener in entity 
		@EntityListeners(AuditingEntityListener.class)
 	
	--------------------------------------------
	
	on entity level we can ignore field using 
	@JsonIgnoreProperties(allowSetters = true,value = "password")
	
	or 
	
	we can use field level annotation
	@JsonProperty(access = Access.WRITE_ONLY)















